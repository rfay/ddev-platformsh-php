#ddev-generated
name: ddev-platformsh

#ddev_version_constraint: '>= v1.24.3'

project_files:
  - scripts/parse-platformsh-config.php
  - scripts/generate-ddev-config.php
  - scripts/generate-platform-relationships.php
  - scripts/setup-platformsh-configuration.php
  - web-build/Dockerfile.platformsh
  - homeadditions/.bashrc.d/platformsh-environment.sh

global_files:
  - commands/web/platform

pre_install_actions:
  - |
    <?php
    #ddev-description: Validate Platform.sh PHP application configuration
    
    // Use environment variables instead of complex validation
    $projectType = $_ENV['DDEV_PROJECT_TYPE'] ?? 'php';
    echo "DDEV Project Type: {$projectType}\n";
    
    // PHP YAML extension should be available by default, will fail if not
    
    // Check for Platform.sh configuration (optional for templates)
    if (file_exists('../.platform.app.yaml')) {
        $platformApp = yaml_parse_file('../.platform.app.yaml');
        if ($platformApp && isset($platformApp['type'])) {
            echo "✅ Platform.sh configuration found: {$platformApp['type']}\n";
        }
    } else {
        echo "⚠️  No Platform.sh configuration found (template mode)\n";
    }
    ?>

post_install_actions:
  - |
    #ddev-description: Check database compatibility and install required DDEV add-ons
    
    # Check if there's an existing database volume
    current_db_version="$(ddev debug get-volume-db-version 2>/dev/null || echo '')"
    
    if [ -n "$current_db_version" ] && [ -f ../.platform/services.yaml ]; then
        # Get the Platform.sh database type and translate it to DDEV type
        platform_db_type=$(grep -E "type: *(mysql|oracle-mysql|postgresql|mariadb)" ../.platform/services.yaml | head -1 | sed 's/.*type: *//' || echo "")
        
        if [ -n "$platform_db_type" ]; then
            # Translate Platform.sh database type to DDEV type
            case "$platform_db_type" in
                mysql:*) expected_ddev_db="mariadb:${platform_db_type#mysql:}" ;;
                oracle-mysql:*) expected_ddev_db="mysql:${platform_db_type#oracle-mysql:}" ;;
                postgresql:*) expected_ddev_db="postgres:${platform_db_type#postgresql:}" ;;
                mariadb:*) expected_ddev_db="$platform_db_type" ;;
                *) expected_ddev_db="$platform_db_type" ;;
            esac
            
            # Check if existing database matches Platform.sh expectation
            if [ "$current_db_version" != "$expected_ddev_db" ]; then
                printf "\n\nThere is an existing database in this project that doesn't match the upstream database type.\n Please use 'ddev delete' to delete the existing database and retry, or try 'ddev debug migrate-database $expected_ddev_db' to migrate the database.\n" >&2
                exit 1
            fi
        fi
    fi
    
    # Install required service add-ons
    if [ -f ../.platform/services.yaml ]; then
        if grep -q "redis" ../.platform/services.yaml; then
            echo "📦 Installing Redis add-on..."
            ddev add-on get ddev/ddev-redis
        fi
        
        if grep -q "memcached" ../.platform/services.yaml; then
            echo "📦 Installing Memcached add-on..."
            ddev add-on get ddev/ddev-memcached
        fi
        
        if grep -q "elasticsearch" ../.platform/services.yaml; then
            echo "📦 Installing Elasticsearch add-on..."
            ddev add-on get ddev/ddev-elasticsearch
        fi
    fi
    
  - |
    <?php
    #ddev-description: Setup Platform.sh configuration for DDEV
    require 'scripts/setup-platformsh-configuration.php';